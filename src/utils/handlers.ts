import { Context, Markup, Telegraf } from 'telegraf';
import { addToHistory } from './history';
import { buttons } from '../data/buttons';
import { Update } from 'telegraf/typings/core/types/typegram';
import { urls } from '../data/urls';
import { buttonKeys } from '../data/buttonKeys';
import { pushToStack, popFromStack, clearUserNavigationStack } from '..';
import {
  handleButtonAction,
  handleButtonActionWithImage,
  handleGroupInfo,
  sendWelcomeMessage,
} from './utils';
import { messages } from '../data/messages';

export const registerButtonHandlers = (bot: Telegraf<Context<Update>>) => {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è /start
  bot.start(async ctx => {
    const firstName = ctx.from?.first_name || '–¥—Ä—É–≥';
    const message = `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!`;
    const keyboard = Markup.inlineKeyboard(buttons.start).reply_markup;

    await ctx.replyWithPhoto(
      { url: urls.welcome },
      {
        caption: message + messages.start,
        reply_markup: keyboard,
      },
    );
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ /start
  buttonKeys.start.forEach(key => {
    bot.action(key, async ctx => {
      try {
        const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        pushToStack(userId.toString(), 'start');
        addToHistory(userId.toString(), key);

        await ctx.deleteMessage();
        await sendWelcomeMessage(ctx);
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${key}:`,
          error,
        );
      }
    });
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  buttonKeys.welcome.forEach(key => {
    bot.action(key, async ctx => {
      try {
        const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        pushToStack(userId.toString(), 'welcome');
        addToHistory(userId.toString(), key);

        await handleButtonAction(ctx, key);
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${key}:`,
          error,
        );
      }
    });
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ù–æ–≤–∏—á–æ–∫
  buttonKeys.newbie.forEach(key => {
    bot.action(key, async ctx => {
      const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      pushToStack(userId.toString(), 'newbie');
      addToHistory(userId.toString(), key);

      try {
        if (key === 'newbie_group_schedule') {
          console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–∏—á–∫–∞');
          await handleButtonActionWithImage(
            ctx,
            'group_schedule',
            urls.group_schedule,
          );
        } else if (key === 'newbie_about_aa' || key === 'newbie_literature') {
          await handleButtonAction(ctx, key.slice(7));
        } else {
          await handleButtonAction(ctx, key);
        }
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${key}:`,
          error,
        );
      }
    });
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ß–ª–µ–Ω –ê–ê
  buttonKeys.participant.forEach(key => {
    bot.action(key, async ctx => {
      const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      pushToStack(userId.toString(), 'participant'); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "participant"
      addToHistory(userId.toString(), key);

      try {
        if (key === 'participant_group_schedule') {
          console.log('–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');
          await handleButtonActionWithImage(
            ctx,
            'group_schedule',
            urls.group_schedule,
          );
        } else if (key === 'participant_literature') {
          await handleButtonAction(ctx, key.slice(12));
        } else {
          await handleButtonAction(ctx, key);
        }
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${key}:`,
          error,
        );
      }
    });
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –í–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—Ç
  buttonKeys.faq.forEach(key => {
    bot.action(key, async ctx => {
      try {
        const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        pushToStack(userId.toString(), 'faq');
        addToHistory(userId.toString(), key);

        await handleButtonAction(ctx, key);
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${key}:`,
          error,
        );
      }
    });
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –ê–ê
  buttonKeys.about_aa.forEach(key => {
    bot.action(key, async ctx => {
      try {
        const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        pushToStack(userId.toString(), 'about_aa');
        addToHistory(userId.toString(), key);

        await handleButtonAction(ctx, key);
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${key}:`,
          error,
        );
      }
    });
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ì—Ä—É–ø–ø–∞ ...
  buttonKeys.group_schedule.forEach(key => {
    bot.action(key, async ctx => {
      try {
        const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        pushToStack(userId.toString(), 'group_schedule');
        addToHistory(userId.toString(), key);

        await handleGroupInfo(ctx, key);
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${key}:`,
          error,
        );
      }
    });
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫
  buttonKeys.relative.forEach(key => {
    bot.action(key, async ctx => {
      try {
        const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        pushToStack(userId.toString(), 'relative');
        addToHistory(userId.toString(), key);

        if (key === 'relative_about_aa') {
          await handleButtonAction(ctx, key.slice(9));
        } else {
          await handleButtonAction(ctx, key);
        }
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ${key}:`,
          error,
        );
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  bot.action('back', async ctx => {
    try {
      const previousState = popFromStack(ctx.from.id.toString()); // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      addToHistory(userId.toString(), 'back');

      if (previousState) {
        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (previousState === 'welcome') {
          await ctx.deleteMessage();
          clearUserNavigationStack(ctx.from.id.toString());
          await sendWelcomeMessage(ctx);
        } else {
          await handleButtonAction(ctx, previousState);
        }
      } else {
        await ctx.deleteMessage();
        await sendWelcomeMessage(ctx);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥":', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ)
  bot.on('text', async ctx => {
    const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    addToHistory(userId.toString(), 'text: ' + ctx.message.text);

    try {
      await sendWelcomeMessage(ctx);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç.–¥.)
  bot.on('message', async ctx => {
    const userId: number | string = ctx.from?.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    addToHistory(userId.toString(), 'unknown_message');

    try {
      await ctx.reply(
        `ü§î –Ø –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.  

–ù–æ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ê–ê (–∞–ª–∫–æ–≥–æ–ª–∏–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—å–µ—Ç). 

–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:`,
        Markup.inlineKeyboard([
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'back')],
          [Markup.button.url('üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ê–ê', urls.question)],
        ]),
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });
};
