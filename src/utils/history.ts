// src/utils/history.ts
import * as fs from 'fs';
import * as path from 'path';
import { Context, Telegraf } from 'telegraf';
import { Update } from 'telegraf/typings/core/types/typegram';

export interface UserAction {
  time: string;
  action: string;
}

export let userNavigationHistory: { [userId: string]: UserAction[] } = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
export const addToHistory = (userId: string, action: string) => {
  const timestamp = new Date().toISOString();
  if (!userNavigationHistory[userId]) {
    userNavigationHistory[userId] = [];
  }
  userNavigationHistory[userId].push({ time: timestamp, action });
  console.log('userNavigationHistory: ', userNavigationHistory);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª
const writeHistoryToFile = async (bot: Telegraf<Context<Update>>) => {
  const filePath = path.join(__dirname, 'user_history.txt');
  let fileContent = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n\n';

  for (const userId in userNavigationHistory) {
    try {
      const userActions = userNavigationHistory[userId];
      const chat = await bot.telegram.getChat(userId);

      if (chat && chat.type === 'private') {
        const userName = chat.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        const userUsername = chat.username ? `@${chat.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

        fileContent += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n`;
        fileContent += `Username: ${userUsername}\n`;
        fileContent += `ID: ${userId}\n`;
        fileContent += `–ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:\n`;

        userActions.forEach(({ time, action }) => {
          fileContent += `üïí ${time} - ${action}\n`;
        });

        fileContent += '\n';
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ userId ${userId}:`, error);
    }
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
  fs.writeFileSync(filePath, fileContent);
  return filePath;
};

export const sendStatisticsToAdmin = async (
  bot: Telegraf<Context<Update>>,
  tgId: string,
) => {
  try {
    // Check if the history is empty
    if (Object.keys(userNavigationHistory).length === 0) {
      await bot.telegram.sendMessage(tgId, '–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª.');
      console.log(
        '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª.',
      );
    } else {
      const filePath = await writeHistoryToFile(bot);
      await bot.telegram.sendDocument(tgId, { source: filePath });
      // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      userNavigationHistory = {};
      console.log('–ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –æ—á–∏—â–µ–Ω–∞.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error);
  }
};
